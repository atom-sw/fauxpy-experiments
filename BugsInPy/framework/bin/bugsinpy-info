#!/bin/bash

framework_location="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

usage="-p project_name
             The id of the project for which the information shall be printed.
        -i bug_id
             The bug number of the project_name for which the information shall be printed.
"

case $1 in
 -[h?] | --help)
    cat <<-____HALP
        Usage: ${0##*/} [ --help ]
        $usage
____HALP
        exit 0;;
esac

###Read the flag of checkout
while getopts p:i: flag
do
    case "${flag}" in
        p) project_name=${OPTARG};;
        i) bug_id=${OPTARG};;
    esac
done

###Project name and bug id are mandatory
if [ "$project_name" == "" ]; then 
   echo "Please input project name"
   exit
fi

cd "$framework_location"
cd ..
cd ..
bugsinpy_location=$(pwd)

###Check if project exist
project_location="$bugsinpy_location/projects/$project_name"
if [ ! -d "$project_location" ]; then
  echo "Project $project_name does not exist, please check the project name"
  exit
fi

###Check if bug exist

if [ "$bug_id" == "" ]; then 
  if [ ! -d "$project_location/bugs/$bug_id" ]; then
     echo "Bug number $bug_id does not exist, please check the bug id"
     exit
  fi
fi
cd "$project_location"
input="project.info"
githubURL=""
checkfurther="NOT OK"

###Read the project.info
while IFS= read -r line
do
  if [[ "$line" == "github_url="* ]]; then
     githubURL="$(cut -d'"' -f 2 <<< $line)"
     githubName="${githubUrl##*/}"
     if [[ "$githubName" == "" ]]; then
         temp="${githubUrl%?}"
         githubName="${temp##*/}"
     fi
  elif [[ "$line" == 'status="OK"'* ]]; then
     checkfurther="OK"
     #clone project if status OK
  fi
done < "$input"

echo "Summary for Project $project_name"
echo "--------------------------------------------------------------------------------"
echo "Script dir	: $framework_location"
echo "Base dir	: $bugsinpy_location"
echo "Data dir	: $project_location"
if [ "$bug_id" != "" ]; then 
  echo "Bug dir		: $project_location/bugs/$bug_id"
fi
echo "--------------------------------------------------------------------------------"
echo "Project name	: $project_name"
echo "Status 		: $checkfurther"
echo "Github URL	: $githubURL"
num_of_bugs=$(find $project_location/bugs/* -maxdepth 0 -type d | wc -l)
echo "Number of bugs	: $num_of_bugs"
echo "--------------------------------------------------------------------------------"

if [ "$bug_id" != "" ]; then 
cd "$project_location/bugs/$bug_id"
pythonpath_set=""
buggy_commit=""
fix_commit=""

###Read bug.info file
DONE=false
until $DONE ;do
read || DONE=true
if [[ "$REPLY" == "buggy_commit_id"* ]]; then
   buggy_commit="$(cut -d'"' -f 2 <<< $REPLY)"
elif [[ "$REPLY" == "fixed_commit_id"* ]]; then
   fix_commit="$(cut -d'"' -f 2 <<< $REPLY)"
elif [[ "$REPLY" == "test_file"* ]]; then
   test_file_all="$(cut -d'"' -f 2 <<< $REPLY)"
   IFS=';' read -r -a test_file <<< "$test_file_all"
elif [[ "$REPLY" == "pythonpath"* ]]; then
   pythonpath_all="$(cut -d'"' -f 2 <<< $REPLY)"
   if [ "$pythonpath_all" != "" ]; then
       temp_folder=":${folder_location}/"
       pythonpath_set=${pythonpath_all//;/$temp_folder}
       pythonpath_set="${folder_location}/${pythonpath_set}"
   fi
fi
done < bug.info
echo ""
echo "Summary for Bug $project_name-$bug_id"
echo "--------------------------------------------------------------------------------"
echo "Revision id"
echo "	$fix_commit"
echo "--------------------------------------------------------------------------------"
echo "Buggy id"
echo "	$buggy_commit"
echo "--------------------------------------------------------------------------------"
echo "Triggering test file"
for index in "${!test_file[@]}"
do
   test_file_now=${test_file[index]}
   echo "	$test_file_now"
done
fi





