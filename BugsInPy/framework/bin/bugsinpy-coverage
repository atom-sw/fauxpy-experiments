#!/bin/bash

usage="-w work_dir
             The working directory to run the test. Default will be the current directory.
       -t single_test
             Run coverage from single test case by input. Default will run coverage from test cases that relevant from bugs. Format for pytest: <test_file_path>::<test_method>. Format for unittest: <test_file_path_without.py>.<test_class>.<test_method> . Use bugsinpy-info to get the information about the project.
       -a
             Run coverage from all test cases in the project. Default will run coverage from test cases that relevant from bugs
       -r
             Run coverage from test cases that relevant from bugs (Default)
"

run_all="0"
relevant="0"
case $1 in
 -[h?] | --help)
    cat <<-____HALP
        Usage: ${0##*/} [ --help ]
        $usage
____HALP
        exit 0;;
 -a) run_all="1";;
 -r) relevant="1";;
esac

single_test=""
###Read the flag of checkout
while getopts t:w: flag
do
    case "${flag}" in
        w) work_dir=${OPTARG};;
        t) single_test=${OPTARG};;
    esac
done

###Update the work directory
if [ "$work_dir" == "" ]; then 
   work_dir=$(pwd)
fi

if [[ $work_dir == */ ]]; then 
   temp_work_dir="$work_dir"
   work_dir=${temp_work_dir::-1}
fi

if [[ ! -e "$work_dir/bugsinpy_run_test.sh" ]]; then
   echo "This is not a checkout project folder"
   exit
fi

if [[ ! -e "$work_dir/bugsinpy_compile_flag" ]]; then
   echo "You have not compile this project"
   exit
fi

if [[ "$relevant" == "1" ]]; then
   run_all="0"
   single_test=""
fi

rm -f "$work_dir/coverage_bugsinpy.txt"
rm -f "$work_dir/coverage_singletest_bugsinpy.txt"
rm -f "$work_dir/coverage_alltest_bugsinpy.txt"

###Activate environment
cd "$work_dir"
if [ -d "env/Scripts" ]; then
  source env/Scripts/activate
else
  source env/bin/activate
fi
pip install coverage

pytest="0"
#read file run_test.sh
run_command_all=""
DONE=false
until $DONE ;do
read || DONE=true
if [ "$REPLY" != "" ]; then
   run_command_all+="$REPLY;"
   if [[ "$REPLY" == *"pytest"* || "$REPLY" == *"py.test"* ]]; then
       pytest="1"
   fi
fi
done < "$work_dir/bugsinpy_run_test.sh"
IFS=';' read -r -a run_command <<< "$run_command_all"


if [[ "$run_all" == "0" && "$single_test" == "" ]]; then
if [[ "$pytest" == "1" ]]; then
  run_command_filter=""
  for index in "${!run_command[@]}"
  do
     run_command_trail=${run_command[index]} 
     echo "RUN EVERY COMMAND"
     echo "$index"
     echo "$run_command_now"
     echo "$test_file_now"
     run_command_now=$(echo $run_command_trail | sed -e 's/\r//g')
  
     coverage=$(coverage run -m $run_command_now 2>&1)
     echo "coverage run -m $run_command_now" &>>"$work_dir/coverage_bugsinpy.txt"
     echo "$coverage" &>>"$work_dir/coverage_bugsinpy.txt"
  
     coverage_report=$(coverage report -m 2>&1)
     echo "$coverage_report"
     printf "\nCoverage Report\n" &>>"$work_dir/coverage_bugsinpy.txt"
     echo "$coverage_report" &>>"$work_dir/coverage_bugsinpy.txt"
     printf "\n\n" &>>"$work_dir/coverage_bugsinpy.txt"

  done
else
  run_command_filter=""
  for index in "${!run_command[@]}"
  do
     run_command_trail=${run_command[index]} 
  
     
     run_command_now=$(echo $run_command_trail | sed -e 's/\r//g')
     echo "RUN EVERY COMMAND"
     echo "$index"
     echo "$run_command_now"
     if [[ "$run_command_now" == *"unittest"* ]]; then
         searchstring="unittest "
         temp_run=${run_command_now##*$searchstring}
         run_command_now="unittest $temp_run"
     else
         if [[ "$run_command_now" == "python -m "* ]]; then
             searchstring="python -m "
         else
             searchstring="python "
         fi 
         echo "$searchstring"
         temp_run=${run_command_now##*$searchstring}
         run_command_now="unittest $temp_run"
         echo "$run_command_now"
     fi
     
     coverage=$(coverage run -m $run_command_now 2>&1)
     echo "$coverage"
     echo "coverage run -m $run_command_now" &>>"$work_dir/coverage_bugsinpy.txt"
     echo "$coverage" &>>"$work_dir/coverage_bugsinpy.txt"

     coverage_report=$(coverage report -m 2>&1)
     echo "$coverage_report"
     printf "\nCoverage Report\n" &>>"$work_dir/coverage_bugsinpy.txt"
     echo "$coverage_report" &>>"$work_dir/coverage_bugsinpy.txt"
     printf "\n\n" &>>"$work_dir/coverage_bugsinpy.txt"

   done
fi

elif [[ "$run_all" == "1" ]]; then
  if [[ "$pytest" == "1" ]]; then
     coverage=$(coverage run -m pytest 2>&1)
     echo "$coverage"
     echo "coverage run -m pytest" &>>"$work_dir/coverage_alltest_bugsinpy.txt"
     echo "$coverage" &>>"$work_dir/coverage_alltest_bugsinpy.txt"

     coverage_report=$(coverage report -m 2>&1)
     echo "$coverage_report"
     printf "\nCoverage Report\n" &>>"$work_dir/coverage_alltest_bugsinpy.txt"
     echo "$coverage_report" &>>"$work_dir/coverage_alltest_bugsinpy.txt"
     printf "\n\n" &>>"$work_dir/coverage_alltest_bugsinpy.txt"

  else
     echo "Run Unittest" 
     ###Read bug.info file
     DONE=false
     until $DONE ;do
     read || DONE=true
     if [[ "$REPLY" == "test_file"* ]]; then
        test_file_all="$(cut -d'"' -f 2 <<< $REPLY)"
        IFS=';' read -r -a test_file <<< "$test_file_all"
        test_file_now=${test_file[0]}
     fi
     done < "$work_dir/bugsinpy_bug.info"

     echo "$test_file_now"
     stop_loop_test="0"
     access_test=""
     if [[ "$test_file_now" != "" ]]; then
        IFS='/' read -r -a test_file_ex <<< "$test_file_now"
     fi
     
     

     for index in "${!test_file_ex[@]}"
     do
     test_file_temp=${test_file_ex[index]}
     if [[ "$stop_loop_test" == "0" ]]; then
        if [[ "$test_file_temp" == *".py"* ]]; then
           stop_loop_test="1"
        else
           if [[ "$test_file_temp" == "test" || "$test_file_temp" == "tests" ]]; then
              stop_loop_test="1"
           fi 
           access_test+="$test_file_temp/"
        fi
     fi
     done

     echo "$access_test"
     echo "coverage run -m unittest discover $access_test"

     coverage=$(coverage run -m unittest discover $access_test 2>&1)
     echo "$coverage"
     echo "coverage run -m unittest discover $access_test" &>>"$work_dir/coverage_alltest_bugsinpy.txt"
     echo "$coverage" &>>"$work_dir/coverage_alltest_bugsinpy.txt"

     coverage_report=$(coverage report -m 2>&1)
     echo "$coverage_report"
     printf "\nCoverage Report\n" &>>"$work_dir/coverage_alltest_bugsinpy.txt"
     echo "$coverage_report" &>>"$work_dir/coverage_alltest_bugsinpy.txt"
     printf "\n\n" &>>"$work_dir/coverage_alltest_bugsinpy.txt"
  fi

elif [ "$single_test" != "" ]; then
  if [[ "$pytest" == "1" ]]; then
     coverage=$(coverage run -m pytest $single_test 2>&1)
     echo "$coverage"
     echo "coverage run -m pytest $single_test" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
     echo "$coverage" &>>"$work_dir/coverage_singletest_bugsinpy.txt"

     coverage_report=$(coverage report -m 2>&1)
     echo "$coverage_report"
     printf "\nCoverage Report\n" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
     echo "$coverage_report" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
     printf "\n\n" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
  else
     coverage=$(coverage run -m unittest -q $single_test 2>&1)
     echo "$coverage"
     echo "coverage run -m unittest -q $single_test" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
     echo "$coverage" &>>"$work_dir/coverage_singletest_bugsinpy.txt"

     coverage_report=$(coverage report -m 2>&1)
     echo "$coverage_report"
     printf "\nCoverage Report\n" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
     echo "$coverage_report" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
     printf "\n\n" &>>"$work_dir/coverage_singletest_bugsinpy.txt"
  fi
fi

###Deactivate the environment
deactivate
